# -*- coding: utf-8 -*-
# @Author: Alexander Sharov

import datetime
import logging
import os
import numpy as np

from data import mesh as m
from algorithm import fem_mp as fem
from algorithm.functions_builder import get_functions
from data.plot import tri_plot
from utils import gif
from data.save import np_array
from data.plot import contour_lines as cs

DATA_DIR = '/Users/ashraov/data/%s' % datetime.datetime.now().strftime("%d_%m_%Y_%H_%M")
#DATA_DIR = '/data/%s' % datetime.datetime.now().strftime("%d_%m_%Y_%H_%M_%S_%f")

RESOURCES_DIR = '/Users/ashraov/projects/study/diploma/resources'
#RESOURCES_DIR = '/opt/diploma/resources'

SURF_DIR = '%s/surf' % DATA_DIR
FRAME_DIR = '%s/frame' % DATA_DIR
WAVE_DIR = '%s/wave' % DATA_DIR
JSON_DIR = '%s/json' % DATA_DIR
LOG_DIR = '%s/log' % DATA_DIR

# NOTE:
# * good mesh: pqIaD
# * worse mesh: pq10IaDX

# sup - pq5IaDX

MESH_TYPE = 'pq5IaDX'
MESH_FILENAME = 'lake_superior.poly'
MAX_PROCESSES = 2

os.makedirs(LOG_DIR, exist_ok=True)
log_name = '%s/%s.log' % (LOG_DIR, datetime.datetime.now().strftime("%d_%m_%Y_%H_%M"))
logging.basicConfig(filename=log_name, level=logging.DEBUG)

def main():
    mesh = m.Mesh(RESOURCES_DIR + '/poly/%s' % MESH_FILENAME)
    mesh.generate(MESH_TYPE)
    mesh.generate_contour()

    #mesh.show()
    #mesh.draw_contour()
    logging.info(mesh.quantity)

    # interval of integration (t0, tf)
    t_span = [1.90, 1.91]
    # times at which to store the computed solution, must be sorted and lie within t_span
    t_eval = [1.902, 1.905, 1.908]

    #solution, times, execution_time = fem.Solver(MAX_PROCESSES, mesh, t_span, t_eval).solve()

    #logging.info('[INFO] fem algorithm worked for %s minutes' % str(execution_time))

    solution = np.arraye-6],[-6.81465593733347e-6],[-5.06359879470709e-6],[7.63215912588759e-6],[-4.08047649771287e-6],[-1.43179718393573e-5],[-2.86179732082858e-6],[-1.00156714620224e-5],[-7.40051388253124e-6],[4.02934617350976e-6],[5.48771167060329e-6],[-6.02058686952908e-6],[3.32519813089890e-6],[6.99140376286915e-6],[7.67796863033577e-6],[8.82812741051297e-6],[3.85286393823905e-6],[-8.26722961512019e-6],[-1.46049135352701e-6],[9.26187208049168e-6],[4.83458084607860e-6],[3.18266875761028e-7],[-8.49680559344060e-6],[5.68031376883467e-6],[7.01061394432138e-6],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]])
    times = np.array([1.0])

    #np_array.write(JSON_DIR, 'solution.json', solution)
    #np_array.write(JSON_DIR, 'times.json', times)

    logging.info('[INFO] json data was recorded')

    q1, q2, H, psi1, psi2 = get_functions(mesh, solution, times)

    # surface q1
    tri_plot.draw_3d_surf(SURF_DIR, 'q_1', q1, times)
    gif.create('%s/q_1' % SURF_DIR)
    # frame q1
    tri_plot.draw_3d_frame(FRAME_DIR, 'q_1', q1, times)
    gif.create('%s/q_1' % FRAME_DIR)

    # surface q2
    tri_plot.draw_3d_surf(SURF_DIR, 'q_2', q2, times)
    gif.create('%s/q_2' % SURF_DIR)
    # frame q2
    tri_plot.draw_3d_frame(FRAME_DIR, 'q_2', q2, times)
    gif.create('%s/q_2' % FRAME_DIR)

    # surface H
    tri_plot.draw_3d_surf(SURF_DIR, 'H', H, times)
    gif.create('%s/H' % SURF_DIR)
    # frame H
    tri_plot.draw_3d_frame(FRAME_DIR, 'H', H, times)
    gif.create('%s/H' % FRAME_DIR)

    # wave function psi1
    cs.draw_psi_2d(WAVE_DIR, 'psi_1', psi1, times, mesh)
    gif.create('%s/psi_1' % WAVE_DIR)

    # wave function psi2
    cs.draw_psi_2d(WAVE_DIR, 'psi_2', psi2, times, mesh)
    gif.create('%s/psi_2' % WAVE_DIR)


if __name__ == "__main__":
    main()
