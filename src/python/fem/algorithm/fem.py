# -*- coding: utf-8 -*-
# @Author: Alexander Sharov

import numpy as np

from sympy import *
from sympy import sqrt

from scipy.integrate import solve_ivp

from geometry.point import Point
from fe.triangle import Triangle

# CONSTANTS

# плотность воды [кг / м^3]
rho = 1000
# плотность воздуха [кг / м^3]
rho_a = 1.2754
# давление на поверхности воды [Па]
P_a = 10 ** 5
# скорость ветра [м / c]
W = 1
# gamma ^ 2
gamma = 0.002
# ускорение свободного падения [м * c^2]
g = 9.832
# g / c^2
gc2 = 0.002
# коэффициент трения Шэззи [м^{1/2} * c^{-1}]
C = 40

H0 = 0.1


def solve(time, mesh):
    M = mesh.quantity
    print('Number of elements = %d' % M)
    elements = mesh.splitting
    x1, x2 = symbols('x_1 x_2')

    def check_boundary(element, number):
        if element[1].number == number:
            x, y = element[1].x, element[1].y
        elif element[2].number == number:
            x, y = element[2].x, element[2].y
        elif element[3].number == number:
            x, y = element[3].x, element[3].y
        else:
            return False

        for point in mesh.contour:
            if (np.abs(point[0] - x) < 1e-4) and (np.abs(point[1] - y) < 1e-4):
                return True
        return False

    def system(time, variables):
        print('time=%s' % time)
        sysfun = np.zeros(shape=(3 * M))

        for element in elements:
            f_eq1 = 0
            f_eq2 = 0
            f_eq3 = 0
            for k in range(0, M):
                N_k = element.get_basic_function_by_number(k)
                weight_functions = 0
                for l in range(0, M):
                    W_l = element.get_basic_function_by_number(l)
                    weight_functions += W_l

                    f_eq1 += \
                        + element.integrate(W_l * diff(-P_a * H0 - P_a * variables[2 * M + k] * N_k - ((g * rho / 2) * H0 ** 2) - g * rho * H0 * variables[2 * M + k] * N_k - g * rho / 2 * variables[2 * M + k] ** 2 * N_k ** 2, x1)) \
                        + element.integrate(P_a * W_l * diff(H0 + variables[2 * M + k] * N_k, x1)) \
                        + element.integrate(sqrt(2)/2 * W ** 2 * gamma * rho_a * W_l) \
                        - element.integrate((gc2 * W_l * variables[k] / (rho * H0 ** 2) * variables[2 * M + k] ** 2 * N_k) * sqrt(variables[k] ** 2 * N_k ** 2 + variables[M + k] ** 2 * N_k ** 2))

                    f_eq2 += \
                        + element.integrate(W_l * diff(-P_a * H0 - P_a * variables[2 * M + k] * N_k - ((g * rho / 2) * H0 ** 2) - g * rho * H0 * variables[2 * M + k] * N_k - g * rho / 2 * variables[2 * M + k] ** 2 * N_k ** 2, x2)) \
                        + element.integrate(P_a * W_l * diff(H0 + variables[2 * M + k] * N_k, x2)) \
                        + element.integrate(sqrt(2)/2 * W ** 2 * gamma * rho_a * W_l) \
                        - element.integrate((gc2 * W_l * variables[M + k] / (rho * H0 ** 2) * variables[2 * M + k] ** 2 * N_k) * sqrt(variables[k] ** 2 * N_k ** 2 + variables[M + k] ** 2 * N_k ** 2))

                    f_eq3 += \
                        - element.integrate(W_l * diff(N_k, x1)) * variables[k] \
                        - element.integrate(W_l * diff(N_k, x2)) * variables[M + k]

                coefficient_of_d_eq1 = element.integrate(weight_functions * N_k)
                coefficient_of_d_eq2 = element.integrate(weight_functions * N_k)
                coefficient_of_d_eq3 = element.integrate(rho * weight_functions * N_k)

                if coefficient_of_d_eq1 != 0:
                    if check_boundary(element, k):
                        sysfun[k] += 0
                    else:
                        sysfun[k] += (f_eq1 / coefficient_of_d_eq1)

                if coefficient_of_d_eq2 != 0:
                    if check_boundary(element, k):
                        sysfun[M + k] += 0
                    else:
                        sysfun[M + k] += (f_eq2 / coefficient_of_d_eq2)

                if coefficient_of_d_eq3 != 0:
                    if check_boundary(element, k):
                        sysfun[2 * M + k] += 0
                    else:
                        sysfun[2 * M + k] += (f_eq3 / coefficient_of_d_eq3)

        print('sysfun=%s\n' % sysfun)
        return sysfun

    y0 = np.zeros(3 * M)
    #sol = solve_ivp(system, time, y0, method='RK23', rtol=1e-3, atol=1e-3)

    sol = [[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  1.62331917e-05,  1.78565030e-04,
         1.80180243e-03,  1.79529538e-02,  6.67270210e-02,
         8.77942562e-02,  8.30057857e-02,  6.46951913e-02],
       [ 0.00000000e+00,  1.62331916e-05,  1.78564844e-04,
         1.80161144e-03,  1.77613706e-02,  5.41280359e-02,
         3.74264948e-02, -4.44427747e-02, -1.29884497e-01],
       [ 0.00000000e+00,  1.89387230e-05,  2.08324926e-04,
         2.10113422e-03,  1.99734995e-02,  1.38786546e-02,
        -1.54527373e-01, -5.57167538e-01, -9.26652254e-01],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  1.62331919e-05,  1.78565269e-04,
         1.80204800e-03,  1.81993206e-02,  8.31426165e-02,
         1.56838185e-01,  2.68307423e-01,  3.57605371e-01],
       [ 0.00000000e+00,  1.62331921e-05,  1.78565455e-04,
         1.80223900e-03,  1.83909304e-02,  9.58681268e-02,
         2.09705750e-01,  4.08262185e-01,  5.77114565e-01],
       [ 0.00000000e+00,  1.89387242e-05,  2.08326519e-04,
         2.10277133e-03,  2.16156908e-02,  1.22133798e-01,
         2.82493025e-01,  5.61886530e-01,  7.94394885e-01],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  1.21748938e-12,  1.47316268e-10,
         1.50012680e-08,  1.50864813e-06,  2.71184730e-05,
         8.17155122e-05,  1.83449352e-04,  2.71939282e-04],
       [ 0.00000000e+00,  3.65246815e-12,  4.41948770e-10,
         4.50034423e-08,  4.52228830e-06,  7.94562743e-05,
         2.29039817e-04,  4.92225918e-04,  7.12612944e-04],
       [ 0.00000000e+00, -3.45577678e-27,  6.94280634e-17,
         7.75038259e-13,  7.83441080e-09,  4.06744661e-06,
         3.43969917e-05,  1.23632376e-04,  2.19014956e-04],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00]]


    print(sol)

    q1_list = list()
    q2_list = list()
    H_list = list()

    ind_range = len(sol[0])

    for element in elements:
        for ind in range(0, ind_range):
            q1 = 0
            q2 = 0
            H = 0
            for k in range(0, M):
                N_k = element.get_basic_function_by_number(k)
                q1 += N_k * sol[k][ind]
                q2 += N_k * sol[M + k][ind]
                H += N_k * sol[2 * M + k][ind]

            q1_list.append(q1)
            q2_list.append(q2)
            H_list.append(H)

    #print(sol)
    return q1_list, q2_list, H_list
